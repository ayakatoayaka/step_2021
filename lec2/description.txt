問題1 
行列のサイズを1〜100まで計算しました。
for文が3重であるのでO(N^3)になると考えた。
実際に測定したところ、time.pngのようになった。
例えば、20^3=8000=80*100であるのでN=80の時はN=20の約100倍になると考えられる。
グラフよりN＝20の時は約0.0003s、N=80の時は約0.026sになっていることがわかるため、
概ね予想通り実行結果もO(N^3)であると考えられる。

問題2
ハッシュテーブルは大規模なデータを扱う際、多くの衝突が起こる。ハッシュテーブルのサイズをMとし、データのサイズをNとして、ハッシュ値が衝突する確率を1/Mとすると
計算量はO(1+N/M)となる。N>>Mであった場合、近似するとO(N)になるため時間が不安定である。一方、木構造はデータサイズにかかわらずO(logN)であるため大規模なデータの
さいは木構造の方が安定した時間で走らせることができる。このような理由から現実では木構造を採用しているのであると考えた。

問題3&4
わからなかった。ハッシュテーブルとqueueを使って実装した。ハッシュテーブルのkeyをqueueに入れて順番の管理をした。
ハッシュテーブルを使っているため検索はO(1)でできるが、queueに存在する要素を入れ直す際にqueueの総入れ替えを行うためpushがO(N)となってしまった。